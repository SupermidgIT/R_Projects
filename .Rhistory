'demo()'
demo()
demo()
demo(())
colors()
q()
michael$
pwd
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
5 == 7
5 !== 7
5 == 7
10 <= 10
info()
skip()
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
### this is a secondary
clear
start()
start
### this is a tertiary heading
q
q()
library(swirl)
ls()
rm(list=ls())
swirl()
submit
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
play()
install.packages(swirl)
install.packages("swirl"")
clearPushBack()
clear
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c
z
?c
z
z(55, z)
z
c(z, 555, z)
z *2 + 100
my_sqrt <- z^ -1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) c(0, 10)
c(1, 2, 3, 4)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z *2 + 1000
my_div
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function(("My first function!"))
boring_function(('My first function!'))
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
?function
{}
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("This is a telegram")
submit()
submit()
submit()
mad_libs
skip()
skip()
submit()
submit()
mad_libs("Mount Royal University", "All black", "Racist white statue")
submit()
submit()
submit()
submit()
submit()
submit()
skip(
)
submit()
"Good" %p% "job!"
submit()
submit()
skip()
submit()
"I" %p% "Love" %p% "R!"
"I" %p% "Love" %p% "R!"
"I" "%p%" "Love" "%p%" "R!"
"I" %p% "Love" %p% "R!"
skip()
head(flags)
dim(flags)
play()
viewinfo(flags)
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
view(shape_mat)
shape_mat
class(matrix)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals <- lapply(flags, unique, length)
length(unique_values)
unique_vals <- sapply(flags, unique, length)
unique_vals <- sapply(flags, unique)
skip()
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
library(swirl)
swirl()
data(cars)
play()
str(cars)
nxt()
?cars
head(cars)
plot(cars)
?plot
linear_reg <- plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
dim(mtcars)
str(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd("~/R_Projects-1")
ls
dir()
dir()
files_full <- list.files("specdata", full.names = TRUE)
str(files_full)
my_data <- data.frame()
for (i in 1:334) {
my_data <- rbind(my_data, read.csv(files_full[i]))
}
head(my_data)
str(my_data)
View(my_data)
str(files_full)
files_full
files_full <- list.files("specdata", full.names = TRUE)
my_data <- data.frame()
files_full <- list.files("specdata", full.names = TRUE)
my_data <- data.frame()
for (i in 1:334) {
my_data <- rbind(my_data, read.csv(files_full[i]))
}
my_data <- data.frame()
files_full <- list.files("specdata", full.names = TRUE)
my_data <- data.frame()
for (i in 1:334) {
my_data <- rbind(my_data, read.csv(files_full[i]))
}
str(my_data)
?which
data_subset < my_data[which(my_data[, "Date"] == date),]
data_subset <- my_data[which(my_data[, "Date"] == date),]
View(my_data)
mean)my_data$sulfate
mean)my_data$sulfate)
mean(my_data$sulfate)
mean(my_data$sulfate, na.rm = TRUE)
mean(my_data[which(my_data$sulfate), "Id" == 1])
mean(my_data[which(my_data$Id) == 1, "sulfate"])
mean(my_data[which(my_data$Id == 1), "sulfate"])
mean(my_data[which(my_data$Id == 1), "sulfate"], rm.na = TRUE)
mean(my_data[which(my_data$Id == 1), "sulfate"], na.rm = TRUE)
View(my_data)
mean(my_data[which(my_data$ID == 1), "sulfate"], na.rm = TRUE)
mean(my_data[which(my_data$ID == 1:10), "sulfate"], na.rm = TRUE)
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat_subset <- dat[which(dat[, "ID"] == ID),]
median(dat_subset[, 2:1], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
dat_subset <- dat[which(dat[, "ID"] == "ID"),]
data_subset
dat_subset
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian()
weightmedian(directory = "diet_data", day = 20)
View(dat)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
median(dat_subset[, 2:1], na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
median(dat_subset[, 2:3], na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
median(dat_subset[, 2:3], na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, ID = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
median(dat_subset[, 2:3], na.rm = TRUE)
}
pollutantmean("specdata", 2, ID = 1:10)
pollutantmean <- function(directory, pollutant, ID = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
mean(dat_subset[, 2:3], na.rm = TRUE)
}
rm(list=ls(all=TRUE))
pollutantmean <- function(directory, pollutant, ID = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
### Ignore this line
###  dat_subset < dat[which(dat[, "Date"] == date),]
### mean(dat$sulfate, na.rm = TRUE)
### mean(dat[which(dat$ID == 1), "sulfate"], na.rm = TRUE)
dat_subset <- dat[which(dat[, "ID"] == ID),]
mean(dat_subset[, 2:3], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", ID = 1:10)
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
files_full <- list.files("specdata", full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
files_full <- list.files("specdata", full.names = TRUE)
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
files_full
?list.files
files_full <- list.files(directory, full.names = TRUE)
files_full <- list.files(directory, full.names = TRUE, path = ".")
files_full <- list.files("specdata", full.names = TRUE, path = ".")
files_full
dat <- data.frame()
for (i in 1:334) {
dat <- rbind(dat, read.csv(files_full[i]))
}
list.files("specdata")
list.files("specdata", full.names = TRUE)
file_full <- list.files("specdata", full.names = TRUE)
files_full <- list.files("specdata", full.names = TRUE)
files_full
specdata_1_10 <- rbind(read.csv(files_full[1:5]), read.csv(files_full[6:10]))
specdata_1_10 <- rbind(read.csv(files_full[1:5]))
specdata_1_10 <- rbind(read.csv(files_full[1:5]), data.frame())
read.csv(files_full[1:10])
files_full
read.csv(files_full[1])
read.csv(files_full[1:10])
read.csv(files_full[2])
read.csv(files_full[c(1,2,3)])
files_full <- list.files("specdata", full.names = TRUE, sep = ";")
files_full <- list.files("specdata", full.names = TRUE)
files_full
str(files_full)
class(files_full)
as.numeric(files_full)
files_full[1:10]
rbind(read.csv(files_full[1]), read.csv(files_full[2]))
lapply(files_full, read.csv)
my_data <- lapply(files_full, read.csv)
mhy_data
my_data
view(my_data)
View(my_data)
lapply(my_data, rbind)
data2 <- lapply(my_data, rbind)
data3 <- lapply(files_full, rbind)
